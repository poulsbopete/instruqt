#!/usr/bin/env bash
set -Eeuo pipefail

# ‚îÄ‚îÄ Config ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
HOME_DIR="${HOME:-/root}"
VALUES_FILE="${VALUES_FILE:-$HOME_DIR/elastic-demo.yaml}"
REL="${REL:-otel-demo}"
NS="${NS:-otel-demo}"
CHART="open-telemetry/opentelemetry-demo"

# Latest first, then fall back to versions that don't trigger the tpl/BasePath bug
TRY_VERSIONS=("0.33.8" "0.33.7" "0.33.6" "0.34.2" "0.35.1" "0.36.1" "0.36.4")

log() { printf '%s\n' "[$(date +%H:%M:%S)] $*"; }

# ‚îÄ‚îÄ 0) Ensure values file exists (placeholders, no env expansion) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if [ ! -s "$VALUES_FILE" ]; then
  cat > "$VALUES_FILE" <<'EOF'
opentelemetry-collector:
  config:
    receivers:
      otlp:
        protocols:
          grpc: {}
          http: {}
    processors:
      memory_limiter:
        check_interval: 1s
        limit_mib: 450
        spike_limit_mib: 128
      batch:
        send_batch_size: 512
        timeout: 200ms
    exporters:
      otlphttp/elastic:
        endpoint: "PASTE_ELASTIC_OTLP_ENDPOINT_HERE"
        headers:
          Authorization: "ApiKey PASTE_ELASTIC_API_KEY_HERE"
        compression: gzip
        retry_on_failure:
          enabled: true
        sending_queue:
          enabled: true
          num_consumers: 2
          queue_size: 10000
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter,batch]
          exporters: [otlphttp/elastic]
        metrics:
          receivers: [otlp]
          processors: [memory_limiter,batch]
          exporters: [otlphttp/elastic]
        logs:
          receivers: [otlp]
          processors: [memory_limiter,batch]
          exporters: [otlphttp/elastic]
EOF
  log "‚úî  $VALUES_FILE created (placeholders inside)"
else
  log "‚Ñπ  $VALUES_FILE already exists; leaving it"
fi

# ‚îÄ‚îÄ 1) Repo + namespace ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
log "‚éà  Updating Helm repo"
helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts --force-update
helm repo update
kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"

# ‚îÄ‚îÄ 2) Clean any FAILED/PENDING install so name is reusable ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if helm ls -n "$NS" --all --failed -q | grep -Fx "$REL" >/dev/null 2>&1; then
  log "‚ö†  Removing failed release '$REL'"
  helm uninstall "$REL" -n "$NS" || true
fi

# ‚îÄ‚îÄ 3) Try versions until one works ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
success=0
for ver in "${TRY_VERSIONS[@]}"; do
  errlog=$(mktemp)
  if helm status "$REL" -n "$NS" >/dev/null 2>&1; then
    ACTION=upgrade
  else
    ACTION=install
  fi

  log "‚éà  helm $ACTION $REL (chart=${CHART}${ver:+, version=$ver})"
  set +e
  if [ -z "$ver" ]; then
    helm $ACTION "$REL" "$CHART" \
      -n "$NS" -f "$VALUES_FILE" --debug 2>&1 | tee "$errlog"
  else
    helm $ACTION "$REL" "$CHART" --version "$ver" \
      -n "$NS" -f "$VALUES_FILE" --debug 2>&1 | tee "$errlog"
  fi
  rc=${PIPESTATUS[0]}
  set -e

  if [ $rc -eq 0 ]; then
    success=1
    break
  fi

  if grep -q "cannot re-use a name that is still in use" "$errlog"; then
    log "‚ö†  Name stuck; uninstalling and retrying"
    helm uninstall "$REL" -n "$NS" || true
  fi
done

if [ $success -ne 1 ]; then
  log "‚ùå All chart versions failed. Tail of last error:"
  tail -50 "$errlog" || true
  exit 1
fi

log "üéâ OTel demo deployed. Pods:"
kubectl -n "$NS" get pods